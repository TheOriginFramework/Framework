using TOF.Framework.Configuration;
using TOF.Framework.DependencyInjection;
using TOF.Framework.Utils.TypeConverters;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;

namespace TOF.Framework.Data
{
    internal static class Utils
    {
        public static string GetConnectionString()
        {
            return ConfigurationProvider
                .GetAppConfigurationReader()
                .GetConnectionStringFromName("app"); ;
        }

        public static ISqlExecutionProvider GetDbExecutionProvider()
        {
            return Application.GetServices(DataTypeRegistrationContainer.Key)
                .Resolve<ISqlExecutionProvider>(new object[] { Utils.GetConnectionString() });
        }

        public static ISqlExecutionProvider GetDbExecutionProvider(string ConnectionString)
        {
            return Application.GetServices(DataTypeRegistrationContainer.Key)
                .Resolve<ISqlExecutionProvider>(new object[] { ConnectionString });
        }

        public static IEnumerable<IDataRecord> GetDataRecords(IDataReader reader)
        {
            while (reader.Read())
                yield return reader;
        }

        public static IEnumerable<IDbDataParameter> BindingModelPropertyToParameter<TModel>(
            TModel Model, IEnumerable<IPropertyBindingInfo> PropertyBindingInfoItems, IEnumerable<IDbDataParameter> Parameters)
        {
            List<IDbDataParameter> parameters = new List<IDbDataParameter>(Parameters);

            foreach (var Parameter in parameters)
            {
                var propBindingQuery = PropertyBindingInfoItems
                    .Where(c => c.GetParameterName() == (Parameter.ParameterName.Substring(1)));

                if (propBindingQuery.Any())
                {
                    var PropertyBindingInfo = propBindingQuery.First();
                    PropertyInfo modelProperty = PropertyBindingInfo.GetPropertyInfo();
                    object value = modelProperty.GetValue(Model, null);
                    ITypeConverter converter = TypeConverterFactory.GetConvertType(
                        (PropertyBindingInfo.GetMapDbType() == DbType.Guid)
                        ? typeof(Guid)
                        : modelProperty.PropertyType);
                    
                    if (value != null)
                    {
                        if (converter is StringConverter)
                        {
                            if (PropertyBindingInfo.GetLength() != null)
                            {
                                if (value.ToString().Length > PropertyBindingInfo.GetLength().Value)
                                    throw new InvalidOperationException("ERROR_MODEL_DATA_LENGTH_TOO_LONG");
                            }
                        }

                        // for DateTime defaults.
                        if (converter is DateTimeConverter)
                        {
                            DateTime dtValue = (DateTime)value;
                            if (dtValue == DateTime.MinValue && PropertyBindingInfo.IsAutoGenerated())
                            {
                                Parameter.DbType = DbType.DateTime;
                                Parameter.Size = 8;
                                Parameter.Value = DateTime.Now.ToString("yyyy/M/d H:m:s");
                                continue;
                            }
                            else
                            {
                                Parameter.DbType = DbType.DateTime;
                                Parameter.Size = 8;
                                Parameter.Value = dtValue.ToString("yyyy/M/d H:m:s");
                                continue;
                            }
                        }

                        if (converter != null)
                        {
                            if (converter is EnumConverter)
                                Parameter.Value = Convert.ToInt32(value);
                            else
                                Parameter.Value = converter.Convert(value);
                        }
                        else
                        {
                            if (value.GetType().IsValueType)
                                Parameter.Value = value;
                            else
                            {
                                if (value == null)
                                    Parameter.Value = DBNull.Value;
                                else
                                    Parameter.Value = value.ToString();
                            }
                        }
                    }
                    else
                    {
                        if (PropertyBindingInfo.IsAllowNull())
                            Parameter.Value = DBNull.Value;
                        else
                        {
                            if (converter is GuidConverter)
                            {
                                if (PropertyBindingInfo.IsAutoGenerated())
                                {
                                    Parameter.DbType = DbType.Guid;
                                    Parameter.Size = 16;
                                    Parameter.Value = Guid.NewGuid();
                                    continue;
                                }
                            }

                            if (converter is DateTimeConverter)
                            {
                                if (PropertyBindingInfo.IsAutoGenerated())
                                {
                                    Parameter.DbType = DbType.DateTime;
                                    Parameter.Size = 8;
                                    Parameter.Value = DateTime.Now.ToString("yyyy/M/d H:m:s");
                                    continue;
                                }
                            }

                            if (PropertyBindingInfo.GetPropertyInfo().PropertyType.IsValueType)
                            {
                                Parameter.Value = Activator.CreateInstance(
                                    PropertyBindingInfo.GetPropertyInfo().PropertyType);
                            }
                            else
                                Parameter.Value = string.Empty;
                        }
                    }
                }
            }

            return parameters;
        }

        public static TModel BindingDataRecordToModel<TModel>(IDataRecord Record, IEnumerable<IPropertyBindingInfo> PropertyBindingInfoItems)
            where TModel: class, new()
        {
            // assign result to property.
            TModel item = new TModel();

            for (int i = 0; i < Record.FieldCount; i++)
            {
                var propQuery = PropertyBindingInfoItems.Where(c => c.GetParameterName() == Record.GetName(i));

                if (propQuery.Any())
                {
                    var propInfo = propQuery.First().GetPropertyInfo();
                    object value = Record.GetValue(i);
                    var converter = TypeConverterFactory.GetConvertType(propInfo.PropertyType);

                    if (value != null && value != DBNull.Value)
                    {
                        if (converter != null)
                        {
                            if (converter is EnumConverter)
                                propInfo.SetValue(item, (converter as EnumConverter).Convert(propInfo.PropertyType, value), null);
                            else
                                propInfo.SetValue(item, converter.Convert(value), null);
                        }
                        else
                            propInfo.SetValue(item, value, null);
                    }
                    else
                    {
                        if (propQuery.First().IsAllowNull())
                            propInfo.SetValue(item, null, null);
                        else
                        {
                            if (propInfo.PropertyType.IsValueType)
                                propInfo.SetValue(item, Activator.CreateInstance(propInfo.PropertyType), null);
                            else
                            {
                                if (converter != null)
                                    propInfo.SetValue(item, converter.Convert(null), null);
                                else
                                    propInfo.SetValue(item, string.Empty, null);
                            }
                        }
                    }
                }
            }

            return item;
        }
    }
}
